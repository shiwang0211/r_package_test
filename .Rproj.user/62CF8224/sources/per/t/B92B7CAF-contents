## Compile all necessary packages here
requirements <- c("readxl", "openxlsx", "knitr", "rmarkdown", "pander", "dplyr",
                  "reshape2", "markdown", "stargazer", "stats", "seasonal", "mondate", 
                  "KFKSDS", "glmnetUtils", "plotROC", "TSA", "ResourceSelection", "tseries",
                  "stringr", "data.table", "gdata", "nortest", "het.test", "DataCombine", 
                  "stsm", "car", "leaps", "zoo", "ggplot2", "egcm", "lmtest", "fma", "itsmr", 
                  "plyr", "quantreg", "MASS", "dynlm", "quantmod", "forecast", "aTSA", "AER", 
                  "PerformanceAnalytics", "tidyr", "BaylorEdPsych", "tsoutliers", "scales", 
                  "FinTS", "chron", "MASS", "quantreg", "glmnetUtils", "forecast", "dplyr")
suppressMessages(suppressWarnings(lapply(requirements, library, character.only=T)))

# clean all
rm(list=ls())

# define file paths
MASTER_EXCEL = "./Input/Master_input.xlsx"
INPUT_SHEET = "example"
DIAG_EXCEL = "FunctionalCode/TestCode/master_script/input/diagnostic_plan.xlsx"
MASTER_SCRIPT = "FunctionalCode/TestCode/master_script/master_script.Rmd"
ERR = "./Output/Model_script_errors.txt"
#TEMP_USER_INPUT = "FunctionalCode/TestCode/master_script/input/tempUserInput.xlsx"
#TEMP_DIAG_TEST = "FunctionalCode/TestCode/master_script/input/tempdiagtest.xlsx"

# read in user setting 
tryCatch({
  
raw_input <<- as.data.frame(read_xlsx(MASTER_EXCEL, sheet = INPUT_SHEET))
user_input <- data.frame(function_name = 'user_input')
for(rownum in c(1:nrow(raw_input))){ 
  colname = as.character(raw_input[rownum, 1]) # read in setting name (e.g., model_type1)
  user_input[[colname]] = raw_input[rownum, 2] # read in setting input value (e.g., lm)
}
user_input$scen_num_quarters = as.numeric(user_input$scen_duration) # convert to number, and rename
user_input$backtest_num_quarters = as.numeric(user_input$backtest_holdout_period) # convert to number, and rename
user_input$date_column_format = gsub("DD","%d",user_input$date_column_format)
user_input$date_column_format = gsub("MM","%m",user_input$date_column_format)
user_input$date_column_format = gsub("YYYY","%Y",user_input$date_column_format)


},  error = function(e) {
  msg = paste0("Fail to read in user input file; Correct file name should be \"", MASTER_EXCEL, "\" with tab name \"", INPUT_SHEET,"\"")
  write(msg, ERR, append = FALSE)
  stop(msg, call. = FALSE)
})

# read in diag plan
diag_plan <<- as.data.frame(read_xlsx(DIAG_EXCEL))

# filter tests
model_type = user_input$model_type1 # e.g., lm, logistic
test_rows <- diag_plan[diag_plan[[model_type]] == 1,] # filter tests only for given model type
na_ind <- apply(test_rows, 1, function(x) all(is.na(x))) # remove rows with all na values
test_rows = test_rows[!na_ind,] # remove rows with all na values
for (func in test_rows$alias){ # update test selection based on user input
  default_value = test_rows[[model_type]][test_rows$alias == func] # e.g., 1
  input_v = user_input[[func]]
  user_input[[func]] = ifelse(input_v %in% c("TRUE","FALSE"), as.logical(input_v), input_v)
  user_value = as.numeric(user_input[[func]]) # e.g., 0, NA
  
  if (user_value %in% c(0,1,NA) & default_value == 1) # 2nd check: Ensure that unavailable tests are not selected
    test_rows[[model_type]][test_rows$alias == func] = min(default_value, user_value) # overwrite with user input
}
test_rows = test_rows[test_rows[[model_type]] == 1,] # filter tests only for given model type

#create user setting file
#wb <- createWorkbook()
#addWorksheet(wb, "Sheet 1")
#writeData(wb, 1, user_input)
#saveWorkbook(wb, file = TEMP_USER_INPUT , overwrite = TRUE)

#create test and diag file
#wb_test <- createWorkbook()
#addWorksheet(wb_test, "Sheet 1")
#writeData(wb_test, 1, test_rows)
#saveWorkbook(wb_test, file = TEMP_DIAG_TEST, overwrite = TRUE)

#create master list
test_master_list <<- test_rows
test_master_list <- merge.data.frame(test_master_list, user_input, by = 'function_name', all = TRUE)

# start rmd and doc
knitDoc <- knit(MASTER_SCRIPT)
render("master_script.md", "word_document",  output_file = paste0("./Output/",user_input$output_filename,".docx"))

